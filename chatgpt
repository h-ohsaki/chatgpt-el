#!/usr/bin/env node

// https://pptr.dev/
const puppeteer = require('puppeteer-core');
const convert = require('html-to-text');

const DEBUG = true;
const DELAY = 100; // ms
const TIMEOUT = 3000; // ms

let ENGINE = 'ChatGPT';
let PAGE_URL = 'https://chatgpt.com/';
let FORM_SELECTOR = 'p.placeholder';
let BUTTON_SELECTOR = 'button[data-testid="send-button"]';
let REPLY_SELECTOR = 'div[data-message-author-role="assistant"]';
let REPLY_PER_QUERY = 1;

function debug(msg) {
    if (DEBUG) {
        process.stderr.write(msg);
    }
}

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function connect_to_browser() {
    debug("## connecting\n");
    let browser;
    try {
        // FIXME: Port number should be configurable.
        browser = await puppeteer.connect({
            browserURL: 'http://localhost:9000',
            // Use the view area as much as possible.
            defaultViewport: null,
        });
    } catch (err) {
        debug('Connection failed: unnable to connect localhost:9000\n');
        process.exit(1);
    }
    return browser;
}

async function open_page(browser) {
    debug('## opening\n');
    const pages = await browser.pages();
    for (const page of pages) {
        // Try to find the page visiting PAGE_URL.
        const url = page.url();
        if (url.indexOf(PAGE_URL) >= 0) {
            await page.bringToFront();
            return page;
        }
    }
    // Newly open the page if not already visiting.
    const page = pages[0];
    await page.bringToFront();
    await page.goto(PAGE_URL);
    return page;
}

async function get_text(page, elem) {
    // Covert the HTML at ELEM to text format.
    const html = await page.evaluate(el => el.innerHTML, elem);
    let text = convert.convert(html, {
        preserveNewlines: false,
        wordwrap: false,
    });
    // Remove unnecessary spaces.
    text = text.replace(/ +\n/g, '\n');
    text = text.replace(/\n\n+/g, '\n\n');
    return text;
}

// FIXME: Code fragments in Markdown format will be truncated.
function display_diff(last_reply, reply) {
    const last_lines = last_reply.split('\n');
    const lines = reply.split('\n');
    // The last line is not displayed since it may change later.
    for (let n = last_lines.length - 2; n < lines.length - 2; n++)
        console.log(lines[n]);
}

async function send_query(page, query) {
    debug("## sending\n");
    if (FORM_SELECTOR.startsWith('textarea')) {
	await page.type(FORM_SELECTOR, query);
    } else {
	await page.$eval(FORM_SELECTOR, (el, str) => el.innerText = str, query);
    }
    let prev_elems;
    if (BUTTON_SELECTOR == 'press_enter') {
	prev_elems = await page.$$(REPLY_SELECTOR);
	await page.keyboard.press('Enter');
    } else {
	const button = await page.waitForSelector(BUTTON_SELECTOR);
	// Record all already-displayed reples.
	prev_elems = await page.$$(REPLY_SELECTOR);
	await button.click();
    }

    // Wait until reply starts displaying.
    debug("## waiting display\n");
    while (true) {
        const elems = await page.$$(REPLY_SELECTOR);
        // ChatGPT and Gemini generate a single DIV, whereas Claude does two.
        if (elems.length - prev_elems.length >= REPLY_PER_QUERY) {
            break;
        }
        await sleep(200);
    }

    debug("## waiting initial\n");
    let elem;
    let last_reply = '';
    let nretires = 0;
    while (true) {
        // NOTE: This code seems redundant but required for ChatGPT.
        const elems = await page.$$(REPLY_SELECTOR);
        elem = elems[elems.length - 1];
        const reply = await get_text(page, elem);
        if (reply.length > 0) {
            display_diff(last_reply, reply);
            last_reply = reply;
            break;
        }
        await sleep(DELAY);
        nretires++;
        // Wait 10 seconds for the initial reply at most.
        if (nretires > 10000 / DELAY) {
            console.log(`No initial reply from ${ENGINE}.`);
            return;
        }
    }

    // Fetch the remaining reply.
    debug("## streaming\n");
    let reply;
    let nretries = 0;
    while (true) {
        reply = await get_text(page, elem);
        if (reply.length > last_reply.length) { // Any addition?
            display_diff(last_reply, reply);
            last_reply = reply;
            nretries = 0;
        } else {
            nretries++;
            // Wait TIMEOUT for consequtive reples at most.
            if (nretries > TIMEOUT / DELAY)
                break;
        }
        await sleep(DELAY);
    }
    // Display the last line.
    debug("## closed\n");
    const lines = reply.split('\n');
    // FIXME: This code may fail for a single-reply.
    console.log(lines[lines.length - 2]);
    console.log(lines[lines.length - 1]);
}

function config_gemini() {
    ENGINE = 'Gemini';
    PAGE_URL = 'https://gemini.google.com/';
    FORM_SELECTOR = 'div.textarea';
    BUTTON_SELECTOR = 'mat-icon[fonticon="send"]';
    REPLY_SELECTOR = 'message-content';
    REPLY_PER_QUERY = 1;
}

function config_claude() {
    ENGINE = 'Claude';
    PAGE_URL = 'https://claude.ai/';
    FORM_SELECTOR = 'p[data-placeholder]';
    BUTTON_SELECTOR = 'button[aria-label="Send Message"]';
    REPLY_SELECTOR = 'div[data-test-render-count]';
    REPLY_PER_QUERY = 2;
}

function config_grok() {
    ENGINE = 'Grok';
    PAGE_URL = 'https://x.com/i/grok';
    FORM_SELECTOR = 'textarea[placeholder="Ask anything"]';
    BUTTON_SELECTOR = 'button[aria-label="Grok something"]';
    REPLY_SELECTOR = 'span[style="text-overflow: unset;"]'; // FIXME
    REPLY_PER_QUERY = 2;
}

function config_deepseek() {
    ENGINE = 'DeepSeek';
    PAGE_URL = 'https://chat.deepseek.com';
    FORM_SELECTOR = 'textarea#chat-input';
    BUTTON_SELECTOR = 'press_enter'; // FIXME
    REPLY_SELECTOR = 'div[class="ds-markdown ds-markdown--block"]'; // FIXME
    REPLY_PER_QUERY = 1;
}

function main() {
    // argv[2] is the first user-specified argument.
    let n = 2;
    // Parse options and arguments.
    while (n < process.argv.length) {
        const arg = process.argv[n];
        if (arg == '-e') {
            let engine = process.argv[n + 1];
            engine = engine.toLowerCase();
            // Use ChatGPT by default.
            if (engine == 'gemini')
                config_gemini();
            if (engine == 'claude')
                config_claude();
            if (engine == 'grok')
                config_grok();
            if (engine == 'deepseek')
                config_deepseek();
            n += 2;
        } else if (arg == '-i') {
            (async () => {
                const browser = await connect_to_browser();
                const page = await open_page(browser);
                process.exit(0);
            })();
            n++;
        } else if (arg == '-q') {
            (async () => {
                const query = process.argv[n + 1];
                const browser = await connect_to_browser();
                const page = await open_page(browser);
                await send_query(page, query);
                process.exit(0);
            })();
            n += 2;
        } else {
            console.log(`Invalid command-line argument '${arg}'.`);
            process.exit(0);
        }
    }
}

main();

#!/usr/bin/env node

// https://pptr.dev/
const puppeteer = require('puppeteer-core');

const CONFIGS = {
    chatgpt: {
        engine: 'ChatGPT',
        page_url: 'https://chatgpt.com/',
        form_selector: 'p.placeholder',
        button_selector: 'button[data-testid="send-button"]',
        reply_selector: 'div[data-message-author-role="assistant"]',
        reply_per_query: 1
    },
    gemini: {
        engine: 'Gemini',
        page_url: 'https://gemini.google.com/',
        form_selector: 'div.textarea',
        button_selector: 'mat-icon[fonticon="send"]',
        reply_selector: 'message-content',
        reply_per_query: 1
    },
    claude: {
        engine: 'Claude',
        page_url: 'https://claude.ai/',
        form_selector: 'p[data-placeholder]',
        button_selector: 'button[aria-label="Send Message"]',
        reply_selector: 'div[data-test-render-count]',
        reply_per_query: 2
    },
    grok: {
        engine: 'Grok',
        page_url: 'https://x.com/i/grok',
        form_selector: 'textarea[placeholder="Ask anything"]',
        button_selector: 'button[aria-label="Grok something"]',
        reply_selector: 'span[style="text-overflow: unset;"]',
        reply_per_query: 2
    },
    deepseek: {
        engine: 'DeepSeek',
        page_url: 'https://chat.deepseek.com',
        form_selector: 'textarea#chat-input',
        button_selector: 'press_enter',
        reply_selector: 'div[class="ds-markdown ds-markdown--block"]',
        reply_per_query: 1
    }
};

function debug(msg) {
    process.stderr.write(msg);
}

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function connect_to_browser() {
    let browser;
    try {
        // FIXME: Port number should be configurable.
        browser = await puppeteer.connect({
            browserURL: 'http://localhost:9000',
            // Use the view area as much as possible.
            defaultViewport: null,
        });
    } catch (err) {
        debug('Connection failed: unnable to connect localhost:9000\n');
        process.exit(1);
    }
    return browser;
}

async function open_page(config, browser) {
    const pages = await browser.pages();
    for (const page of pages) {
        // Try to find the page visiting PAGE_URL.
        const url = page.url();
        if (url.indexOf(config.page_url) >= 0) {
            // await page.bringToFront();
            return page;
        }
    }
    // Newly open the page if not already visiting.
    const page = pages[0];
    // await page.bringToFront();
    await page.goto(config.page_url);
    return page;
}

async function send_query(config, page, query) {
    // Fill the input form with the query.
    if (config.form_selector.startsWith('textarea')) {
	await page.type(config.form_selector, query);
    } else {
	await page.$eval(config.form_selector, (el, str) => el.innerText = str, query);
    }
    // Press the submit button.
    if (config.button_selector == 'press_enter') {
	await page.keyboard.press('Enter');
    } else {
	const button = await page.waitForSelector(config.button_selector);
	await button.click();
    }
}

async function receive(config, page) {
    const html = await page.evaluate((selector) => {
	const elems = document.querySelectorAll(selector);
	const elem = elems[elems.length - 1];
	return elem.innerHTML;
    }, config.reply_selector);
    console.log(html);
}

function main() {
    let config = CONFIGS.chatgpt;
    // argv[2] is the first user-specified argument.
    let n = 2;
    // Parse options and arguments.
    while (n < process.argv.length) {
        const arg = process.argv[n];
        if (arg == '-e') {
            let engine = process.argv[n + 1];
            engine = engine.toLowerCase();
	    config = CONFIGS[engine];
            n += 2;
        } else if (arg == '-i') {
            (async () => {
                const browser = await connect_to_browser();
                const page = await open_page(config, browser);
                process.exit(0);
            })();
            n++;
        } else if (arg == '-s') {
            (async () => {
                const query = process.argv[n + 1];
                const browser = await connect_to_browser();
                const page = await open_page(config, browser);
                await send_query(config, page, query);
                process.exit(0);
            })();
            n += 2;
        } else if (arg == '-r') {
            (async () => {
                const browser = await connect_to_browser();
                const page = await open_page(config, browser);
                await receive(config, page);
                process.exit(0);
            })();
            n += 1;
        } else {
            console.log(`Invalid command-line argument '${arg}'.`);
            process.exit(0);
        }
    }
}

main();
